Резиновая матрица - 2.

На прошлой неделе вы решали задачу по написанию функций для программы, работающей с двумерными матрицами. В этом задании вам предстоит написать класс Matrix, реализующим похожий функционал. Создание матрицы происходит в конструкторе класса, в качестве параметра которому передается необязательный параметр max_size (целое число - максимально допустимый размер матрицы (кол-во строк, столбцов), по умолчанию равный 1000). Конструктор создает матрицу размером size = 1, заполненную "нулевым" элементом, имеющим значение None. В классе Matrix необходимо написать реализацию следующих методов:


1).  "магический метод" __str__ возвращающий строковое представление матрицы - строку, в которой строки матрицы разделены переносом строки, а элементы строки разделены пробелами, необходим для вывода матрицы на печать.

2). метод append, отвечающий за добавление элемента в матрицу. Увеличивает размер матрицы, если необходимо. Правила добавления элементов к матрице:
- матрица заполняется построчно, слева-направо, с первой строки до последней
- добавляемый элемент занимает позицию первого свободного "нулевого" элемента
- добавление "нулевого" элемента (None) игнорируется
- при достижении максимально допустимого размера матрицы добавляет элементы в матрицу, пока в ней есть "нулевые" элементы. Попытка добавить элемент в полностью заполненную матрицу (не имеющей "нулевых" элементов) вызывает исключение IndexError
- в случае, когда добавляемый элемент, занимает место первого элемента в последней строке матрицы, матрицу необходимо "расширить", увеличив размер матрицы на 1 (добавить один столбец и одну строку), при этом добавленные в матрицу элементы сдвигаются к началу таким образом, чтобы между ними не было "нулевых" элементов.

3). метод pop, возвращает последний добавленный в матрицу элемент. Уменьшает размер матрицы, если необходимо. Правила извлечения элементов из матрицы:
- извлекает и возвращает последний добавленный в матрицу элемент, заменяя его "нулевым" элементом
- при попытке извлечь элемент из матрицы размером size=1, заполненную "нулевым" элементом, выбрасывается исключение IndexError
- в случае, когда после извлечения элемента, количество добавленных элементов можно разместить в матрице меньшего размера, таким образом, что последняя строка полученной матрицы будет содержать только пустые элементы, матрицу необходимо "сжать" (уменьшить ее размер на 1) перед тем, как вернуть извлекаемое значение

4). метод класса from_iter, который получает в качестве параметра итерируемый объект. Возвращает экземпляр класса Matrix с добавленными в него элементами, полученными из итерируемого объекта. Если передан не итерируемый объект метод выбрасывает исключение TypeError.

У вас уже есть готовый шаблон кода с описанием класса и методов:

class Matrix:
    MAX_SIZE = 1000  

    def __init__(self, max_size=None):
        pass

    def append(self, element=None):
        pass

    def pop(self):
        pass

    def __str__(self):
        pass

    @classmethod
    def from_iter(cls, iter_obj, max_size=None):
        pass

Используя шаблон, напишите реализацию класса Matrix. Вы может добавить объявления дополнительных функций,  если они необходимы для вашего решения.

Пример работы:

>>> # создание матрицы по умолчанию
>>> matrix = Matrix()>>> print(type(matrix))
<class '__main__.Matrix'>
>>> print(matrix)
None
>>> # добавляем элементы и выводим матрицу на печать после каждого добавления
>>> for i in range(1, 4):
...:    matrix.append(i)
...:    print(matrix)
...:    print('*' * 10)
...:
1 None
None None
**********
1 2
None None
**********
1 2 3
None None None
None None None
**********
>>> # достаем элемент из матрицы
>>> matrix.pop()
3
>>> print(matrix)
1 2
None None
>>> # добавим "пустой" элемент
>>> matrix.append(None)
>>> print(matrix)
1 2
None None
>>> # создаем матрицу с установленным максимальным размером
>>> matrix = Matrix(max_size=2)
>>> # добавим элементы в матрицу, выведем матрицу 
>>> for i in range(1, 5):
...:    matrix.append(i)
...:print(matrix)
...:
1 2
3 4
>>> # попытка добавить элемент в "заполненную матрицу"
>>> matrix.append(5)
.....<часть вывода пропущена>....
IndexError: list assignment index out of range
>>>
>>> # создаем матрицу из итерируемого объекта (списка)
>>> matrix = Matrix.from_iter([1,2,3])
>>> print(matrix)
1 2 3
None None None
None None None
>>> # создаем матрицу из итерируемого объекта (генератор)
>>> matrix = Matrix.from_iter(range(3))
>>> print(matrix)
0 1 2
None None None
None None None
>>> # создаем матрицу из итерируемого объекта (генератор) с аргументом max_size=3
>>> matrix = Matrix.from_iter(range(9), max_size=3)
>>> print(matrix)
0 1 2
3 4 5
6 7 8
>>> # попытка создать матрицу max_size=3 и добавить 30 элементов
>>> matrix = Matrix.from_iter(range(30), max_size=3)
.....<часть вывода пропущена>....
IndexError: list assignment index out of range
>>> # в следующем случае количество не "нулевых" элементов в итерируемом объекте
>>> # не превышает максимально количество элементов в матрице
>>> matrix = Matrix.from_iter([None,1,2,None,None,3,None,4,None,None,None], max_size=2)>>> print(matrix)
1 2
3 4
>>>
Напишите программу. Тестируется через stdin → stdout
